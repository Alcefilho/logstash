input {
    tcp {
        port => 5514
    }
    udp {
        port => 5514
    }
}

filter {

    # Drop NESSUS scans. Use your NESSUS IP
    #if ("xxx.xxx.xxx.xxx" in [message]){
    #    drop {}
    #}

    grok {
        match => [ "message", "^%{SYSLOG5424PRI}%{SPACE}%{GREEDYDATA:message2}" ]
    }

    mutate {
        rename => { "message2" => "message" }
        remove_field => [ "message2" ]
    }

    # Remove fields from the kv filter that you do not want to index
    kv {
        exclude_keys => [ "c", "m", "n", "pri","type" ]
    }

    if ("" in [time]){
        date {
            match => [ "time", "yyyy-MM-dd HH:mm:ss ZZZ" ]
        }
    }

    # src & dst usually come as <IP>:<PORT>:<INTERFACE>.  This separates them.
    if ("tcp" in [proto]){
        if (":" in [src]){
            grok {
                match => [ "src", "^%{IP:srcip}:%{INT:srcport}:%{GREEDYDATA:srcint}" ]
                remove_field => ["src"]
            }
          }
        if (":" in [dst]) {
            grok {
                match => [ "dst", "^%{IP:dstip}:%{INT:dstport}:%{GREEDYDATA:dstint}" ]
                remove_field => [ "dst"]
            }
        }
    } elseif ("udp" in [proto]){
        if (":" in [src]){
            grok {
                match => [ "src", "^%{IP:srcip}:%{INT:srcport}" ]
                remove_field => ["src"]
            }
          }
        if (":" in [dst]) {
            grok {
                match => [ "dst", "^%{IP:dstip}:%{INT:dstport}" ]
                remove_field => [ "dst"]
            }
        }
    } elseif "ospfigp" in [proto] {
        if (":" in [src]) {
            grok {
                match => [ "src", "^%{IP:srcip}:%{INT:srcport}:%{GREEDYDATA:srcint}" ]
                remove_field => ["src"]
            }
          }
        if (":" in [dst]) {
            grok {
                match => [ "dst", "^%{IP:dstip}:%{INT:dstport}" ]
                remove_field => [ "dst"]
            }
        }
    } elseif [proto] == "icmp" {
        if (":" in [src]){
            grok {
                match => [ "src", "^%{IP:srcip}::%{GREEDYDATA:srcint}" ]
                remove_field => ["src"]
            }
          }
        if (":" in [dst]) {
            grok {
                match => [ "dst", "^%{IP:dstip}" ]
                remove_field => [ "dst"]
            }
        }
    } else if [msg] == "Received notify. NO_PROPOSAL_CHOSEN" {
        if (":" in [src]){
            grok {
                match => [ "src", "^%{IP:srcip}:%{INT:srcport}" ]
                remove_field => ["src"]
            }
          }
        if (":" in [dst]) {
            grok {
                match => [ "dst", "^%{IP:dstip}:%{INT:dstport}" ]
                remove_field => [ "dst"]
            }
        }
    } elseif [proto] == "0" {
        mutate {
            add_field => { "srcip" => "0.0.0.0" }
            add_tag => [ "private" ]
        }
    } 

    # tag private IPs
    if ("" in [srcip]) {
        cidr {
            address => [ "%{srcip}" ]
            network => [ "0.0.0.0/32", "10.0.0.0/8", "172.16.0.0/12", "192.168.0.0/16", "fc00::/7", "127.0.0.0/8", "::1/128","169.254.0.0/16", "fe80::/10","224.0.0.0/4", "ff00::/8","255.255.255.255/32" ]
            add_tag => [ "private" ]
        }
    }

    #  Do not geoip private IPs
    if ("private" not in [tags]){
        geoip {
            source => "srcip"
        }
    }
}

output {
    if "_grokparsefailure" in [tags] {
        file { path => "/var/log/logstash/failed_sonicwall_events-%{+YYYY-MM-dd}" }
    }
  elasticsearch {
    hosts => ["domain-endpoint"]
    index => "sonicwall-%{+YYYY.MM.dd}"
    manage_template => false
    ssl => true
    aws_access_key_id => 'ACCESS_KEY'
    aws_secret_access_key => 'SECRET_KEY'
    region => "us-east-1"
    
  }
  stdout { codec => rubydebug }
}
