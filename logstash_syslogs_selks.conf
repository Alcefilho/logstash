input {
  file { 
    path => ["/var/log/suricata/eve.json"]
    #sincedb_path => ["/var/lib/logstash/"]
    sincedb_path => ["/var/cache/logstash/sincedbs/since.db"]
    codec =>   json 
    type => "SELKS" 
  }
syslog {
    type => Sonicwall
    port => 5515
  }

}

filter {
  if [type] == "SELKS" {
    date {
      match => [ "timestamp", "ISO8601" ]
    }
    ruby {
      code => "if event['event_type'] == 'fileinfo'; event['fileinfo']['type']=event['fileinfo']['magic'].to_s.split(',')[0]; end;"
    }
  }

  if [src_ip]  {
    geoip {
      source => "src_ip" 
      target => "geoip" 
      #database => "/opt/logstash/vendor/geoip/GeoLiteCity.dat" 
      add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
      add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}"  ]
    }
    mutate {
      convert => [ "[geoip][coordinates]", "float" ]
    }
    if ![geoip.ip] {
      if [dest_ip]  {
        geoip {
          source => "dest_ip"
          target => "geoip"
          #database => "/opt/logstash/vendor/geoip/GeoLiteCity.dat"
          add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
          add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}"  ]
        }
        mutate {
          convert => [ "[geoip][coordinates]", "float" ]
        }
      }
    }
  }
if [type] == "Sonicwall" {
                kv {
                        exclude_keys => [ "c", "id", "m", "n", "pri" ]
                }
                grok {
                        match => [ "src", "%{IP:srcip}:%{DATA:srcinfo}" ]
                }
                grok {
                        match => [ "dst", "%{IP:dstip}:%{DATA:dstinfo}" ]
                }
                grok {
                        remove_field => [ "srcinfo", "dstinfo" ]
                }
        geoip {
                add_tag => [ "geoip" ]
                source => "srcip"
                database => "/opt/logstash/vendor/geoip/GeoLiteCity.dat"
        }
  }
}

output { 
  elasticsearch {
    host => "127.0.0.1"
    protocol => transport
  }
}